package studentmanager;

public class Student {
	/* class Student 별도 생성
	학생 클래스 : 한 학생의 정보를 나타내는 클래스
	- 학번, 이름, 생년월일, 학부, 학과, 수강과목s(과목 클래스를 배열로 생성), 
	- 수강과목의 번지를 대신할 cnt 변수
	- 메서드
	- 생성자, get/set, print간단, print세부
	- 수강 과목 추가,(배열이 다 찼다면 늘려주기)
	- 수강 과목 삭제
	 * */
	
	//멤버 변수
	private String stdNum;
	private String stdName;
	private String registerNum;
	private String faculty;
	private String major;
	private Subject[] subjectList; //subject 클래스를 배열로 선언
	private int subCount;
	
	//생성자
	public Student() {}
	//전제 요소를 받는 생성자
	public Student(String stdNum, String stdName, String registerNum, String faculty, String major) {
		//super(); //상속을 받는다면 상속을 받는 클래스에 대한 생성자
		this.stdNum = stdNum;
		this.stdName = stdName;
		this.registerNum = registerNum;
		this.faculty = faculty;
		this.major = major;
	}
	
	//메서드
	//print method : 학생정보만 출력
	public void stdPrint() {
		System.out.println("학생명(학번):"+stdName+"("+stdNum+")");
		System.out.println("학부(학과):"+faculty+"("+major+")");
	}
	//수강과목을 출력하는 메서드
	public void subPrint() {
		//수강 과목이 없을 때
		if(subCount==0) {
			System.out.println("수강중인 과목이 없습니다.");
		}
		//수강 과목이 있을 때 : 수강과목은 여러 개 있을 수 있음.
		for(int i=0;i<subCount;i++) {
			System.out.println(subjectList[i]); //toString을 이용한 출력
			//print 메서드로 직접 sysout을 했을 경우 
			//subjectList[i].print(메서드명); //subject 클래스에 print메서드가 있을 경우
		}
	}
	
	//수강과목 추가
	/* 매개변수 : Subject subName
	 * 리턴타입 : void ->subList에 넣는거라 돌려줄게 없음
	 * */
	public void insertSubject(Subject subName) { //객체를 생성해서 갖고 와라
		//배열이 다 찼다면 늘려주기
		if(subCount==subjectList.length) {
			//new를 이용 배열 생성 (신 배열을 생성)+5
			Subject[] tmp=new Subject[subjectList.length+5]; // [subCount+5]
			//arraycopy를 이용한 배열 복사
			//System.arraycopy(구배열, 시작번지, 신배열, 시작번지, 총 개수)
			System.arraycopy(subjectList, 0, tmp, 0, subCount); // subjectList.length
			//새로만든 배열로 연결
			subjectList=tmp;
		}
		//subName 추가
		subjectList[subCount]=subName;
		subCount++; //값을 추가했기 때문에 subCount 증가
	}
	
	//수강과목 삭제
	/* 매개변수 : String name
	 * 리턴타입 : void 
	 * */
	public void deleteSubject(String subName) {
		int index=-1; //찾는 과목의 위치를 나타내는 변수
		int search=0;
		// 만약 매개변수의 값이 null이라면 return
		if(subName==null) {
			return;
		}
		//subName이 subjectList에 있는지 검색
		for(int i=0;i<subCount;i++) {
			if(subName.equals(subjectList[i].getSubName())) {
				//있다면 번지를 index에 저장
				index=i;
				break; //다음꺼 찾을 필요 없음
			}
		}
		//찾는 과목이 없다면
		if(index==-1) {
			System.out.println("철회할 과목이 없습니다.");
			return;
		}
		//찾았을 경우 삭제
		//찾은 위치부터 뒷번지의 과목을 앞번지로 옮기는 과정
		//subCount = 1 1과목이 있다는 것을 의미 subjectList = 0번지
		for(int i=index;i<subCount-1;i++) {
			subjectList[i]=subjectList[i+1];
		}
		//마지막 번지는 null
		//ex) 과목이 3개 있다면 0 1 2
		subjectList[subCount-1]=null;
		subCount--;
	}

	//getter/setter
	public String getStdNum() {
		return stdNum;
	}

	public void setStdNum(String stdNum) {
		this.stdNum = stdNum;
	}

	public String getStdName() {
		return stdName;
	}

	public void setStdName(String stdName) {
		this.stdName = stdName;
	}

	public String getRegisterNum() {
		return registerNum;
	}

	public void setRegisterNum(String registerNum) {
		this.registerNum = registerNum;
	}

	public String getFaculty() {
		return faculty;
	}

	public void setFaculty(String faculty) {
		this.faculty = faculty;
	}

	public String getMajor() {
		return major;
	}

	public void setMajor(String major) {
		this.major = major;
	}

	public Subject[] getSubjectList() {
		return subjectList;
	}

	public void setSubjectList(Subject[] subjectList) {
		this.subjectList = subjectList;
	}

	public int getSubCount() {
		return subCount;
	}
	

}
